import cv2
import os;

import keras
import numpy as np
from keras import Sequential, Input, Model
from keras.engine import InputLayer
from keras.layers import MaxPooling2D, Dropout, Flatten, Dense, Activation, Conv2D, GlobalAveragePooling2D
from keras.optimizers import Adam, SGD
from keras_preprocessing.image import ImageDataGenerator


def train_data_set(path):
    data_set = []
    for dir in os.listdir(path):
        new_path = os.path.join(path,dir)
        for file in os.listdir(new_path):
            file_path = os.path.join(new_path,file)
            img = cv2.imread(file_path)
            img = cv2.resize(img,(299,299))
            data_set.append([np.array(img),dir])
    return data_set
train_data = train_data_set("E:/sperm_image/HuSHem/train")
test_data = train_data_set("E:/sperm_image/HuSHem/test")

train_data_img = np.array([i[0] for i in train_data]).reshape(-1,299,299,3).astype("float32")
train_data_label = np.array([i[1] for i in train_data]).reshape(-1,1)

test_data_img = np.array([i[0] for i in test_data]).reshape(-1,299,299,3).astype("float32")
test_data_label = np.array([i[1] for i in test_data]).reshape(-1,1)

train_data_label = keras.utils.to_categorical(train_data_label, num_classes=4)
test_data_label = keras.utils.to_categorical(test_data_label, num_classes=4)
# input_tensor = Input(input_shape=(299,299,3))
input = Input(shape=(299,299,3),name = 'image_input')
vgg16_model = keras.applications.inception_v3.InceptionV3(include_top = False, weights="imagenet")
vgg16_model.summary()

def add_new_last_layer(base_model, nb_classes):
    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    x = Dense(4096, activation='relu')(x)
    predictions = Dense(nb_classes, activation='softmax')(x)
    model = Model(input=base_model.input, output=predictions)
    return model

def setup_to_transfer_learn(model, base_model):
    for layer in base_model.layers:
        layer.trainable = False
    model.compile(optimizer=Adam(0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

model = add_new_last_layer(vgg16_model,4)

setup_to_transfer_learn(model, vgg16_model)


def setup_to_finetune(model):
    for layer in model.layers[:172]:
        layer.trainable = False
    for layer in model.layers[172:]:
        layer.trainable = True
    model.compile(optimizer=SGD(lr=0.0001, momentum=0.9), loss='categorical_crossentropy', metrics=['accuracy'])

setup_to_finetune(model)

print(model.evaluate(train_data_img,train_data_label,batch_size=100,verbose=1))

model.fit(train_data_img,train_data_label,batch_size=100,epochs=300,shuffle=True,validation_data=(test_data_img,test_data_label))

